name: supabase

services:

  studio:
    container_name: supabase-studio
    image: supabase/studio:2025.05.19-sha-3487831
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "fetch('http://supabase-studio:3000/api/platform/profile').then((r) => {if (r.status !== 200) throw new Error(r.status)})"
        ]
      timeout: 10s
      interval: 5s
      retries: 3
    depends_on:
      analytics:
        condition: service_healthy
    environment:
      STUDIO_PG_META_URL: "http://supabase-meta:8080"
      POSTGRES_PASSWORD: "${SUPABASE_POSTGRES_PASSWORD}"

      DEFAULT_ORGANIZATION_NAME: "{{SUPABASE_STUDIO_DEFAULT_ORGANIZATION}}"
      DEFAULT_PROJECT_NAME: "{{SUPABASE_STUDIO_DEFAULT_PROJECT}}"
      OPENAI_API_KEY: "${SUPABASE_OPENAI_API_KEY:-}"

      SUPABASE_URL: "http://supabase-kong:8000"
      SUPABASE_PUBLIC_URL: "{{SUPABASE_PUBLIC_URL}}"
      SUPABASE_ANON_KEY: "${SUPABASE_ANON_KEY}"
      SUPABASE_SERVICE_KEY: "${SUPABASE_SERVICE_ROLE_KEY}"
      AUTH_JWT_SECRET: "${SUPABASE_JWT_SECRET}"

      LOGFLARE_API_KEY: "${LOGFLARE_API_KEY}"
      LOGFLARE_URL: "http://supabase-analytics:4000"
      NEXT_PUBLIC_ENABLE_LOGS: "true"
      # Comment to use Big Query backend for analytics
      NEXT_ANALYTICS_BACKEND_PROVIDER: postgres
    networks:
      - "{{ COMMON_DOCKER_NETWORK_NAME }}"

  kong:
    container_name: supabase-kong
    image: kong:2.8.1
    restart: unless-stopped
    ports:
      - "{{SUPABASE_KONG_HTTP_PORT}}:8000/tcp"
      - "{{SUPABASE_KONG_HTTPS_PORT}}:8443/tcp"
    volumes:
      - ./volumes/api/kong.yml:/home/kong/temp.yml:ro,z
    depends_on:
      analytics:
        condition: service_healthy
    environment:
      KONG_DATABASE: "off"
      KONG_LOG_LEVEL: "debug"
      KONG_DECLARATIVE_CONFIG: /home/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl,basic-auth, jwt
      KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: 160k
      KONG_NGINX_PROXY_PROXY_BUFFERS: 64 160k
      SUPABASE_ANON_KEY: "${SUPABASE_ANON_KEY}"
      SUPABASE_SERVICE_KEY: "${SUPABASE_SERVICE_ROLE_KEY}"
      DASHBOARD_USERNAME: "{{SUPABASE_DASHBOARD_USERNAME}}"
      DASHBOARD_PASSWORD: "${SUPABASE_DASHBOARD_PASSWORD}"
    entrypoint: bash -c 'eval "echo \"$$(cat ~/temp.yml)\"" > ~/kong.yml && /docker-entrypoint.sh kong docker-start'
    networks:
      - "{{ COMMON_DOCKER_NETWORK_NAME }}"

  auth:
    container_name: supabase-auth
    image: supabase/gotrue:v2.172.1
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9999/health"
        ]
      timeout: 5s
      interval: 5s
      retries: 3
    depends_on:
      db:
        condition: service_healthy
      analytics:
        condition: service_healthy
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      API_EXTERNAL_URL: "{{ SUPABASE_API_EXTERNAL_URL }}"

      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgres://supabase_auth_admin:${SUPABASE_POSTGRES_PASSWORD}@{{SUPABASE_POSTGRES_HOST}}:{{SUPABASE_POSTGRES_PORT}}/{{SUPABASE_POSTGRES_DB}}

      GOTRUE_SITE_URL: "{{SUPABASE_SITE_URL}}"
      GOTRUE_URI_ALLOW_LIST: "{{SUPABASE_ADDITIONAL_REDIRECT_URLS}}"
      GOTRUE_DISABLE_SIGNUP: "{{SUPABASE_DISABLE_SIGNUP}}"

      GOTRUE_JWT_ADMIN_ROLES: service_role
      GOTRUE_JWT_AUD: authenticated
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_JWT_EXP: "{{SUPABASE_JWT_EXPIRY}}"
      GOTRUE_JWT_SECRET: "${SUPABASE_JWT_SECRET}"

      GOTRUE_EXTERNAL_EMAIL_ENABLED: "{{SUPABASE_ENABLE_EMAIL_SIGNUP}}"
      GOTRUE_EXTERNAL_ANONYMOUS_USERS_ENABLED: "{{SUPABASE_ENABLE_ANONYMOUS_USERS}}"
      GOTRUE_MAILER_AUTOCONFIRM: "{{SUPABASE_ENABLE_EMAIL_AUTOCONFIRM}}"

      GOTRUE_SMTP_ADMIN_EMAIL: "{{SUPABASE_SMTP_ADMIN_EMAIL}}"
      GOTRUE_SMTP_HOST: "{{SUPABASE_SMTP_HOST}}"
      GOTRUE_SMTP_PORT: "{{SUPABASE_SMTP_PORT}}"
      GOTRUE_SMTP_USER: "{{SUPABASE_SMTP_USER}}"
      GOTRUE_SMTP_PASS: "${SUPABASE_SMTP_PASS}"
      GOTRUE_SMTP_SENDER_NAME: "{{SUPABASE_SMTP_SENDER_NAME}}"
      GOTRUE_MAILER_URLPATHS_INVITE: "{{SUPABASE_MAILER_URLPATHS_INVITE}}"
      GOTRUE_MAILER_URLPATHS_CONFIRMATION: "{{SUPABASE_MAILER_URLPATHS_CONFIRMATION}}"
      GOTRUE_MAILER_URLPATHS_RECOVERY: "{{SUPABASE_MAILER_URLPATHS_RECOVERY}}"
      GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: "{{SUPABASE_MAILER_URLPATHS_EMAIL_CHANGE}}"

      GOTRUE_EXTERNAL_PHONE_ENABLED: "{{SUPABASE_ENABLE_PHONE_SIGNUP}}"
      GOTRUE_SMS_AUTOCONFIRM: "{{SUPABASE_ENABLE_PHONE_AUTOCONFIRM}}"
    networks:
      - "{{ COMMON_DOCKER_NETWORK_NAME }}"

  rest:
    container_name: supabase-rest
    image: postgrest/postgrest:v12.2.12
    restart: unless-stopped
    depends_on:
      db:
        # Disable this if you are using an external Postgres database
        condition: service_healthy
      analytics:
        condition: service_healthy
    environment:
      PGRST_DB_URI: postgres://authenticator:${SUPABASE_POSTGRES_PASSWORD}@{{SUPABASE_POSTGRES_HOST}}:{{SUPABASE_POSTGRES_PORT}}/{{SUPABASE_POSTGRES_DB}}
      PGRST_DB_SCHEMAS: "{{SUPABASE_PGRST_DB_SCHEMAS}}"
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: "${SUPABASE_JWT_SECRET}"
      PGRST_DB_USE_LEGACY_GUCS: "false"
      PGRST_APP_SETTINGS_JWT_SECRET: "${SUPABASE_JWT_SECRET}"
      PGRST_APP_SETTINGS_JWT_EXP: "{{SUPABASE_JWT_EXPIRY}}"
      PGRST_LOG_LEVEL: "debug"
    command:
      [
        "postgrest"
      ]
    networks:
      - "{{ COMMON_DOCKER_NETWORK_NAME }}"

  realtime:
    container_name: realtime-dev.supabase-realtime
    image: supabase/realtime:v2.34.47
    restart: unless-stopped
    depends_on:
      db:
        # Disable this if you are using an external Postgres database
        condition: service_healthy
      analytics:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-sSfL",
          "--head",
          "-o",
          "/dev/null",
          "-H",
          "Authorization: Bearer ${SUPABASE_ANON_KEY}",
          "http://localhost:4000/api/tenants/realtime-dev/health"
        ]
      timeout: 5s
      interval: 5s
      retries: 3
    environment:
      PORT: 4000
      DB_HOST: "{{SUPABASE_POSTGRES_HOST}}"
      DB_PORT: "{{SUPABASE_POSTGRES_PORT}}"
      DB_USER: "supabase_admin"
      DB_PASSWORD: "${SUPABASE_POSTGRES_PASSWORD}"
      DB_NAME: "{{SUPABASE_POSTGRES_DB}}"
      DB_AFTER_CONNECT_QUERY: 'SET search_path TO _realtime'
      DB_ENC_KEY: supabaserealtime
      API_JWT_SECRET: "${SUPABASE_JWT_SECRET}"
      SECRET_KEY_BASE: "${SUPABASE_SECRET_KEY_BASE}"
      ERL_AFLAGS: -proto_dist inet_tcp
      DNS_NODES: "''"
      RLIMIT_NOFILE: "10000"
      APP_NAME: realtime
      SEED_SELF_HOST: true
      RUN_JANITOR: true
    networks:
      - {{ COMMON_DOCKER_NETWORK_NAME }}

  storage:
    container_name: supabase-storage
    image: supabase/storage-api:v1.22.17
    restart: unless-stopped
    volumes:
      - ./volumes/storage:/var/lib/storage:z
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://supabase-storage:5000/status"
        ]
      timeout: 5s
      interval: 5s
      retries: 3
    depends_on:
      db:
        condition: service_healthy
      rest:
        condition: service_started
      imgproxy:
        condition: service_started
    environment:
      ANON_KEY: ${SUPABASE_ANON_KEY}
      SERVICE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      POSTGREST_URL: http://supabase-rest:3000
      PGRST_JWT_SECRET: ${SUPABASE_JWT_SECRET}
      DATABASE_URL: postgres://supabase_storage_admin:${SUPABASE_POSTGRES_PASSWORD}@{{SUPABASE_POSTGRES_HOST}}:{{SUPABASE_POSTGRES_PORT}}/{{SUPABASE_POSTGRES_DB}}
      FILE_SIZE_LIMIT: 52428800
      STORAGE_BACKEND: file
      FILE_STORAGE_BACKEND_PATH: /var/lib/storage
      TENANT_ID: stub
      REGION: stub
      GLOBAL_S3_BUCKET: stub
      ENABLE_IMAGE_TRANSFORMATION: "true"
      IMGPROXY_URL: http://supabase-imgproxy:5001
    networks:
      - "{{ COMMON_DOCKER_NETWORK_NAME }}"

  imgproxy:
    container_name: supabase-imgproxy
    image: darthsim/imgproxy:v3.8.0
    restart: unless-stopped
    volumes:
      - ./volumes/storage:/var/lib/storage:z
    healthcheck:
      test:
        [
          "CMD",
          "imgproxy",
          "health"
        ]
      timeout: 5s
      interval: 5s
      retries: 3
    environment:
      IMGPROXY_BIND: ":5001"
      IMGPROXY_LOCAL_FILESYSTEM_ROOT: /
      IMGPROXY_USE_ETAG: "true"
      IMGPROXY_ENABLE_WEBP_DETECTION: "{{SUPABASE_IMGPROXY_ENABLE_WEBP_DETECTION}}"
    networks:
      - "{{ COMMON_DOCKER_NETWORK_NAME }}"

  meta:
    container_name: supabase-meta
    image: supabase/postgres-meta:v0.89.0
    restart: unless-stopped
    depends_on:
      db:
        # Disable this if you are using an external Postgres database
        condition: service_healthy
      analytics:
        condition: service_healthy
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: "{{SUPABASE_POSTGRES_HOST}}"
      PG_META_DB_PORT: "{{SUPABASE_POSTGRES_PORT}}"
      PG_META_DB_NAME: "{{SUPABASE_POSTGRES_DB}}"
      PG_META_DB_USER: "supabase_admin"
      PG_META_DB_PASSWORD: "${SUPABASE_POSTGRES_PASSWORD}"
    networks:
      - "{{ COMMON_DOCKER_NETWORK_NAME }}"

  functions:
    container_name: supabase-edge-functions
    image: supabase/edge-runtime:v1.67.4
    restart: unless-stopped
    volumes:
      - ./volumes/functions:/home/deno/functions:Z
    depends_on:
      analytics:
        condition: service_healthy
    environment:
      JWT_SECRET: "${SUPABASE_JWT_SECRET}"
      SUPABASE_URL: "http://supabase-kong:8000"
      SUPABASE_ANON_KEY: "${SUPABASE_ANON_KEY}"
      SUPABASE_SERVICE_ROLE_KEY: "${SUPABASE_SERVICE_ROLE_KEY}"
      SUPABASE_DB_URL: postgresql://postgres:${SUPABASE_POSTGRES_PASSWORD}@{{SUPABASE_POSTGRES_HOST}}:{{SUPABASE_POSTGRES_PORT}}/{{SUPABASE_POSTGRES_DB}}
      VERIFY_JWT: "{{SUPABASE_FUNCTIONS_VERIFY_JWT}}"
    command:
      [
        "start",
        "--main-service",
        "/home/deno/functions/main"
      ]
    networks:
      - "{{ COMMON_DOCKER_NETWORK_NAME }}"

  analytics:
    container_name: supabase-analytics
    image: supabase/logflare:1.12.0
    restart: unless-stopped
    ports:
      - 4000:4000
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "http://localhost:4000/health"
        ]
      timeout: 5s
      interval: 5s
      retries: 10
    depends_on:
      db:
        condition: service_healthy
    environment:
      LOGFLARE_NODE_HOST: 127.0.0.1
      DB_USERNAME: "supabase_admin"
      DB_DATABASE: "_supabase"
      DB_HOSTNAME: "{{SUPABASE_POSTGRES_HOST}}"
      DB_PORT: "{{SUPABASE_POSTGRES_PORT}}"
      DB_PASSWORD: "${SUPABASE_POSTGRES_PASSWORD}"
      DB_SCHEMA: "_analytics"
      LOGFLARE_API_KEY: "${LOGFLARE_API_KEY}"
      LOGFLARE_SINGLE_TENANT: "true"
      LOGFLARE_SUPABASE_MODE: "true"
      LOGFLARE_MIN_CLUSTER_SIZE: 1

      POSTGRES_BACKEND_URL: postgresql://supabase_admin:${SUPABASE_POSTGRES_PASSWORD}@{{SUPABASE_POSTGRES_HOST}}:{{SUPABASE_POSTGRES_PORT}}/_supabase
      POSTGRES_BACKEND_SCHEMA: "_analytics"
      LOGFLARE_FEATURE_FLAG_OVERRIDE: multibackend=true
      # Uncomment to use Big Query backend for analytics
      # GOOGLE_PROJECT_ID: "{{SUPABASE_GOOGLE_PROJECT_ID}}"
      # GOOGLE_PROJECT_NUMBER: "{{SUPABASE_GOOGLE_PROJECT_NUMBER}}"
    networks:
      - "{{ COMMON_DOCKER_NETWORK_NAME }}"

  db:
    container_name: supabase-db
    image: supabase/postgres:15.8.1.060
    restart: unless-stopped
    volumes:
     - ./volumes/db/realtime.sql:/docker-entrypoint-initdb.d/migrations/99-realtime.sql:Z
     - ./volumes/db/webhooks.sql:/docker-entrypoint-initdb.d/init-scripts/98-webhooks.sql:Z
     - ./volumes/db/roles.sql:/docker-entrypoint-initdb.d/init-scripts/99-roles.sql:Z
     - ./volumes/db/jwt.sql:/docker-entrypoint-initdb.d/init-scripts/99-jwt.sql:Z
     - ./volumes/db/_supabase.sql:/docker-entrypoint-initdb.d/migrations/97-_supabase.sql:Z
     - ./volumes/db/logs.sql:/docker-entrypoint-initdb.d/migrations/99-logs.sql:Z
     - ./volumes/db/pooler.sql:/docker-entrypoint-initdb.d/migrations/99-pooler.sql:Z
     - db-config:/etc/postgresql-custom
     - ./supabase_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
        "CMD",
        "pg_isready",
        "-U",
        "postgres",
        "-h",
        "localhost"
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    depends_on:
      vector:
        condition: service_healthy
    environment:
      POSTGRES_HOST: /var/run/postgresql
      PGPORT: "{{SUPABASE_POSTGRES_PORT}}"
      POSTGRES_PORT: "{{SUPABASE_POSTGRES_PORT}}"
      PGPASSWORD: "${SUPABASE_POSTGRES_PASSWORD}"
      POSTGRES_PASSWORD: "${SUPABASE_POSTGRES_PASSWORD}"
      PGDATABASE: "{{SUPABASE_POSTGRES_DB}}"
      POSTGRES_DB: "{{SUPABASE_POSTGRES_DB}}"
      JWT_SECRET: "${SUPABASE_JWT_SECRET}"
      JWT_EXP: "{{SUPABASE_JWT_EXPIRY}}"
    command:
      [
        "postgres",
        "-c",
        "config_file=/etc/postgresql/postgresql.conf",
        "-c",
        "log_min_messages=fatal" # prevents Realtime polling queries from appearing in logs
      ]
    networks:
      - "{{ COMMON_DOCKER_NETWORK_NAME }}"

  vector:
    container_name: supabase-vector
    image: timberio/vector:0.28.1-alpine
    restart: unless-stopped
    volumes:
      - ./volumes/logs/vector.yml:/etc/vector/vector.yml:ro,z
      - {{SUPABASE_DOCKER_SOCKET_LOCATION}}:/var/run/docker.sock:ro,z
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://supabase-vector:9001/health"
        ]
      timeout: 5s
      interval: 5s
      retries: 3
    environment:
      LOGFLARE_API_KEY: "${LOGFLARE_API_KEY}"
    command:
      [
        "--config",
        "/etc/vector/vector.yml"
      ]
    security_opt:
      - "label=disable"
    networks:
      - "{{ COMMON_DOCKER_NETWORK_NAME }}"

  supavisor:
    container_name: supabase-pooler
    image: supabase/supavisor:2.5.1
    restart: unless-stopped
    ports:
      - {{SUPABASE_POSTGRES_PORT}}:5432
      - {{SUPABASE_POOLER_PROXY_PORT_TRANSACTION}}:6543
    volumes:
      - ./volumes/pooler/pooler.exs:/etc/pooler/pooler.exs:ro,z
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-sSfL",
          "--head",
          "-o",
          "/dev/null",
          "http://127.0.0.1:4000/api/health"
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      db:
        condition: service_healthy
      analytics:
        condition: service_healthy
    environment:
      PORT: 4000
      POSTGRES_PORT: "{{SUPABASE_POSTGRES_PORT}}"
      POSTGRES_DB: "{{SUPABASE_POSTGRES_DB}}"
      POSTGRES_PASSWORD: "${SUPABASE_POSTGRES_PASSWORD}"
      DATABASE_URL: ecto://supabase_admin:${SUPABASE_POSTGRES_PASSWORD}@db:{{SUPABASE_POSTGRES_PORT}}/_supabase
      CLUSTER_POSTGRES: "true"
      SECRET_KEY_BASE: "${SUPABASE_SECRET_KEY_BASE}"
      VAULT_ENC_KEY: "${SUPABASE_VAULT_ENC_KEY}"
      API_JWT_SECRET: "${SUPABASE_JWT_SECRET}"
      METRICS_JWT_SECRET: "${SUPABASE_JWT_SECRET}"
      REGION: local
      ERL_AFLAGS: -proto_dist inet_tcp
      POOLER_TENANT_ID: "{{SUPABASE_POOLER_TENANT_ID}}"
      POOLER_DEFAULT_POOL_SIZE: "{{SUPABASE_POOLER_DEFAULT_POOL_SIZE}}"
      POOLER_MAX_CLIENT_CONN: "{{SUPABASE_POOLER_MAX_CLIENT_CONN}}"
      POOLER_POOL_MODE: transaction
    command:
      [
        "/bin/sh",
        "-c",
        "/app/bin/migrate && /app/bin/supavisor eval \"$$(cat /etc/pooler/pooler.exs)\" && /app/bin/server"
      ]
    networks:
      - "{{ COMMON_DOCKER_NETWORK_NAME }}"

volumes:
  db-config:
  storage-data: # Именованный том для данных Storage
  logflare-data: # Именованный том для Logflare

networks:
  "{{ COMMON_DOCKER_NETWORK_NAME }}":
    external: true
