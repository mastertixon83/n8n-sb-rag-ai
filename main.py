import click
import os
import json
import shutil
from dotenv import load_dotenv
from loguru import logger

from utils import run_command
from config import AppConfig
from setup_n8n import setup_n8n
from setup_supabase import setup_supabase


@click.group()
def cli():
    """–ò–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä –∏ —É–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è n8n + Supabase + RAG AI."""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö.
    load_dotenv(override=False)


@cli.command()
@click.option('--force', is_flag=True, help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥.')
def install(force):
    """
    python main.py install
    python main.py destroy
    sudo rm -rf n8n_* supabase-project/

    python main.py restart --stack n8n
    python main.py restart --stack all
    python main.py restart --stack n8n --resreate
    python main.py restart --stack all --resreate

    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (n8n, Supabase).
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ .env –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ.
    """
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ n8n + Supabase + RAG AI...")

    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä AppConfig. 'force' –±—É–¥–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ collect_user_inputs
        config = AppConfig(skip_inputs=False)

        # 1. –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info("‚ñ∂Ô∏è –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ .env...")
        config.collect_user_inputs()
        logger.success("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã/–∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

        # 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º n8n —Å—Ç–µ–∫
        logger.info("\n‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É n8n —Å—Ç–µ–∫–∞...")
        setup_n8n(config)
        logger.success("‚úÖ –°—Ç–µ–∫ n8n —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω!")

        # 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Supabase —Å—Ç–µ–∫
        logger.info("\n‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Supabase —Å—Ç–µ–∫–∞...")
        setup_supabase(config)
        logger.success("‚úÖ –°—Ç–µ–∫ Supabase —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω!")

        summary_text = f"""
        üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (n8n, Supabase) —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –∑–∞–ø—É—â–µ–Ω—ã!

        ‚û° –î–æ—Å—Ç—É–ø –∫ N8N: {config.n8n_webhook_url}
        
        ‚û° –î–æ—Å—Ç—É–ø –∫ PGAdmin: http://0.0.0.0:5051/login?next=/ 
           Login: {config.n8n_pgadmin_email}
           Pass:  {config.n8n_pgadmin_password}

        ‚û° –î–æ—Å—Ç—É–ø –∫ Postgres N8N:
           HOST: n8n_postgres
           DB:   {config.n8n_postgres_db}
           User: {config.n8n_postgres_user}
           Pass: {config.n8n_postgres_password}

        ‚û° Inbucket (–ø–æ—á—Ç–∞): http://localhost:{config.n8n_inbucket_web_port}

        ‚û° Supabase Studio: http://localhost:{config.supabase_studio_port}
           Login: {config.supabase_dashboard_username}
           Pass:  {config.supabase_dashboard_password}
        
        - URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase - http://supabase-kong:8000 
        üóù Supabase SERVICE_ROLE_KEY: {config.supabase_service_role_key}
        """
        with open("summary.txt", "w", encoding="utf-8") as file:
            file.write(summary_text.strip())

        logger.success("\nüéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (n8n, Supabase) —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –∑–∞–ø—É—â–µ–Ω—ã!")
        logger.info(summary_text)

    except Exception as e:
        logger.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        logger.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")


@cli.command()
@click.option('--confirm', is_flag=True, help='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞.')
def destroy(confirm):
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã (n8n, Supabase) –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ/–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --confirm –¥–ª—è –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è.
    """
    logger.info("üí• –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö...")

    if not confirm:
        if not click.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã (n8n, Supabase), –∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!", abort=True):
            logger.info("–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è.")
            return

    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏–º –∏ —É–¥–∞–ª–∏–º n8n —Å—Ç–µ–∫
        logger.info("‚ñ∂Ô∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º n8n —Å—Ç–µ–∫...")
        try:
            n8n_docker_compose_path = os.path.join(os.getcwd(), 'docker-compose.yml')
            if os.path.exists(n8n_docker_compose_path):
                run_command(["docker", "compose", "-f", n8n_docker_compose_path, "down", "-v", "--remove-orphans"])
                logger.success("‚úÖ –°—Ç–µ–∫ n8n –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —É–¥–∞–ª–µ–Ω—ã —Ç–æ–º–∞.")
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ n8n
                os.remove(n8n_docker_compose_path)
                if os.path.exists('.env'):
                    os.remove('.env')
                logger.success("‚úÖ –§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ n8n —É–¥–∞–ª–µ–Ω—ã.")
            else:
                logger.info("–§–∞–π–ª docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω–∏—è n8n.")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ n8n —Å—Ç–µ–∫–∞: {e}")

        # –ó–∞—Ç–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏–º –∏ —É–¥–∞–ª–∏–º Supabase —Å—Ç–µ–∫
        logger.info("‚ñ∂Ô∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º Supabase —Å—Ç–µ–∫...")
        try:
            supabase_project_dir = os.path.join(os.getcwd(), 'supabase-project')
            if os.path.exists(os.path.join(supabase_project_dir, 'docker-compose.yml')):
                run_command(["docker", "compose", "-f", "docker-compose.yml", "down", "-v", "--remove-orphans"],
                            cwd=supabase_project_dir)
                logger.success("‚úÖ –°—Ç–µ–∫ Supabase –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —É–¥–∞–ª–µ–Ω—ã —Ç–æ–º–∞.")
                # –£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ Supabase
                shutil.rmtree(supabase_project_dir, ignore_errors=True) # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
                logger.success("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è Supabase-project –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã.")
            else:
                logger.info("–§–∞–π–ª docker-compose.yml –≤ supabase-project –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω–∏—è Supabase.")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ Supabase —Å—Ç–µ–∫–∞: {e}")

        # –£–¥–∞–ª—è–µ–º –æ–±—â—É—é Docker —Å–µ—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        config_instance = AppConfig()  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Å–µ—Ç–∏
        network_name = config_instance.common_docker_network_name
        logger.info(f"‚ñ∂Ô∏è –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –æ–±—â—É—é Docker —Å–µ—Ç—å '{network_name}'...")
        try:
            inspect_result = run_command(["docker", "network", "inspect", network_name], capture_output=True, check=False)
            if inspect_result.returncode == 0:  # –°–µ—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ç—å –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (Ports - empty list or not present)
                # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±: –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å JSON –≤—ã–≤–æ–¥ docker network inspect
                network_info = json.loads(inspect_result.stdout)[0]
                if not network_info.get("Containers") and not network_info.get("Peers"):
                    run_command(["docker", "network", "rm", network_name])
                    logger.success(f"‚úÖ Docker —Å–µ—Ç—å '{network_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
                else:
                    logger.warning(f"‚ö†Ô∏è Docker —Å–µ—Ç—å '{network_name}' –≤—Å–µ –µ—â–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏ –∏–ª–∏ –∏–º–µ–µ—Ç –ø–∏—Ä—ã. –ù–µ —É–¥–∞–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
            else:
                logger.info(f"Docker —Å–µ—Ç—å '{network_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ù–∏—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è Docker —Å–µ—Ç–∏: {e}")

        logger.success("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")


@cli.command()
@click.option('--stack', type=click.Choice(['n8n', 'supabase', 'all']), default='all', help="""
–£–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–æ–π —Å—Ç–µ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å:

- n8n ‚Äî —Ç–æ–ª—å–∫–æ —Å—Ç–µ–∫ n8n (n8n, PostgreSQL, PgAdmin, Inbucket, Cloudflare Tunnel).
- supabase ‚Äî —Ç–æ–ª—å–∫–æ —Å—Ç–µ–∫ Supabase (Supabase Studio, API, DB –∏ —Ç.–¥.).
- all ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–∞ —Å—Ç–µ–∫–∞.

–ü—Ä–∏–º–µ—Ä:
  python main.py restart --stack n8n
""")
@click.option('--recreate', is_flag=True, help="""
–ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ —Ç–æ–º–∞ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç `docker compose down -v && up -d`).
‚ö†Ô∏è –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–æ–º–∞ –∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.

–ü—Ä–∏–º–µ—Ä:
  python main.py restart --stack supabase --recreate
""")
def restart(stack, recreate):
    """
    –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–µ–∫ Docker (n8n, Supabase –∏–ª–∏ –æ–±–∞).

    –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã –±–µ–∑ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏,
    –∞ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∏—Ö —Å –Ω—É–ª—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.

    –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

    ‚ñ∏ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ n8n (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö):
      python main.py restart --stack n8n

    ‚ñ∏ –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å Supabase —Å—Ç–µ–∫ (—É–¥–∞–ª–∏—Ç—å –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≤—Å–µ —Ç–æ–º–∞):
      python main.py restart --stack supabase --recreate

    ‚ñ∏ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å—ë (n8n + Supabase), —Å–æ—Ö—Ä–∞–Ω–∏–≤ –¥–∞–Ω–Ω—ã–µ:
      python main.py restart --stack all

    ‚ñ∏ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≤—Å—ë —Å –Ω—É–ª—è:
      python main.py restart --stack all --recreate
    """
    from utils import run_command
    from config import AppConfig

    config = AppConfig()
    stack_paths = {
        "n8n": os.path.join(os.getcwd(), "docker-compose.yml"),
        "supabase": os.path.join(os.getcwd(), "supabase-project", "docker-compose.yml"),
    }

    if recreate:
        confirm = click.confirm(
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å—Ç–µ–∫ '{stack}' —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Ç–æ–º–æ–≤ (—ç—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –î–ê–ù–ù–´–ï)?",
            abort=True
        )
        logger.warning("‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (docker compose down -v)")

    def restart_stack(name, compose_path):
        if not os.path.exists(compose_path):
            logger.warning(f"‚ö†Ô∏è Docker Compose —Ñ–∞–π–ª –¥–ª—è {name} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {compose_path}")
            return
        try:
            args_down = ["docker", "compose", "-f", compose_path, "down"]
            if recreate:
                args_down.append("-v")
            run_command(args_down, cwd=os.path.dirname(compose_path))
            logger.info(f"‚¨ÜÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–µ–∫ {name}...")
            run_command(["docker", "compose", "-f", compose_path, "up", "-d"], cwd=os.path.dirname(compose_path))
            logger.success(f"‚úÖ –°—Ç–µ–∫ {name} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å—Ç–µ–∫–∞ {name}: {e}")

    if stack in ("n8n", "all"):
        restart_stack("n8n", stack_paths["n8n"])
    if stack in ("supabase", "all"):
        restart_stack("supabase", stack_paths["supabase"])


if __name__ == '__main__':
    cli()